N=10000
g=sample(rbinom(N,0:2,0.5))
y1=g*0.1+rnorm(N);y1=y1/sd(y1);y1=y1-mean(y1)
y2=g*0.05+rnorm(N);y2=y2/sd(y2);y2=y2-mean(y2)
vary1=vary2=1
varg=var(g)
b1=lm(y1~g)$coeff[2]
b2=lm(y2~g)$coeff[2]
covy1y2=cov(y1,y2)
S=matrix(rep(0,9),c(3,3))
colnames(S)=rownames(S)=c("y1","y2","g")
S["y1","y1"]=vary1
S["y2","y2"]=vary2
S["g","g"]=varg
S["y1","y2"]=covy1y2
S["y1","g"]=b1*varg
S["y2","g"]=b2*varg
S[lower.tri(S)]=t(S)[lower.tri(S)]
S
.cond=function(response,pred,cond,S,N){
b_pred=S[response,pred]/S[pred,pred]
b_cond=.b(response=response,pred=cond,S=S)
b_pred=b_pred-sum(S[pred,cond]*b_cond)/S[pred,pred]
b_pred
}
S
.cond(response=1,pred=3,cond=3,S=S,N=10000)
.b=function(response,pred,S){
out <- solve(S[pred,pred])%*%S[response,pred]
return(out)
}
.seb=function(response,pred,S,N){
sigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
#sigma_joint=S[response,response]
out=as.vector(sigma_joint)*solve(S[pred,pred])/(N-length(pred)-1)
out=diag(out)
out=sqrt(out)
return(out)
}
#
.manova=function(response,pred,S,N){
sigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
Fst=((S[response,response]-as.vector(sigma_joint))/as.vector(sigma_joint))*((N-length(pred)-1)/length(pred))
return(Fst)
}
.t=function(response,pred,S,N){
out=.b(response=response,pred=pred,S=S)/.seb(response=response,pred=pred,S=S,N=N)
return(out)
}
.cond=function(response,pred,cond,S,N){
b_pred=S[response,pred]/S[pred,pred]
b_cond=.b(response=response,pred=cond,S=S)
b_pred=b_pred-sum(S[pred,cond]*b_cond)/S[pred,pred]
b_pred
}
N=10000
.cond(response=1,pred=3,cond=3,S=S,N=10000)
S
response=1,pred=3,cond=3,S=S,N=10000
#response=1,pred=3,cond=3,S=S,N=10000
.cond(response=1,pred=3,cond=2,S=S,N=10000)
b1
b2
res=lm(y1~g)$res
lm(res~g)
sasadsfadfasdfigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
res=lm(y1~y2)$res
lm(res~g)
.cond(response=1,pred=3,cond=2,S=S,N=10000)
summary(lm(res~g))
solve(0.5)
.cond_se=function(response,pred,cond,S,N){
#sigma_cond=S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred]-.cond_b(response,pred,cond,S)
#sigma_joint=S[response,response]
sigma_joint=(S[response,response]-t(.b(response,pred=cond,S=S))%*%S[response,cond])
sigma_joint=sigma_joint-t(.cond_b(response,pred,cond,S))%*%S[response,pred])
.cond_se=function(response,pred,cond,S,N){
#sigma_cond=S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred]-.cond_b(response,pred,cond,S)
#sigma_joint=S[response,response]
sigma_joint=(S[response,response]-t(.b(response,pred=cond,S=S))%*%S[response,cond])
sigma_joint=sigma_joint-t(.cond_b(response,pred,cond,S))%*%S[response,pred]
out=as.vector(sigma_joint)*solve(S[pred,pred])/(N-length(pred)-1)
out=diag(out)
out=sqrt(out)
return(out)
}
.cond_se(response=1,pred=3,cond=2,S=S,N=10000)
.b=function(response,pred,S){
out <- solve(S[pred,pred])%*%S[response,pred]
return(out)
}
.seb=function(response,pred,S,N){
sigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
#sigma_joint=S[response,response]
out=as.vector(sigma_joint)*solve(S[pred,pred])/(N-length(pred)-1)
out=diag(out)
out=sqrt(out)
return(out)
}
#
.manova=function(response,pred,S,N){
sigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
Fst=((S[response,response]-as.vector(sigma_joint))/as.vector(sigma_joint))*((N-length(pred)-1)/length(pred))
return(Fst)
}
.t=function(response,pred,S,N){
out=.b(response=response,pred=pred,S=S)/.seb(response=response,pred=pred,S=S,N=N)
return(out)
}
.cond_b=function(response,pred,cond,S){
b_pred=S[response,pred]/S[pred,pred]
b_cond=.b(response=response,pred=cond,S=S)
b_pred=b_pred-sum(S[pred,cond]*b_cond)/S[pred,pred]
b_pred
}
.cond_se=function(response,pred,cond,S,N){
#sigma_cond=S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred]-.cond_b(response,pred,cond,S)
#sigma_joint=S[response,response]
sigma_joint=(S[response,response]-t(.b(response,pred=cond,S=S))%*%S[response,cond])
sigma_joint=sigma_joint-t(.cond_b(response,pred,cond,S))%*%S[response,pred]
out=as.vector(sigma_joint)*solve(S[pred,pred])/(N-length(pred)-1)
out=diag(out)
out=sqrt(out)
return(out)
}
.cond_se(response=1,pred=3,cond=2,S=S,N=10000)
summary(lm(res~g))
N=10000
g1=sample(rbinom(N,0:2,0.5))
g2=g1*0.1+rnorm(N)
y=g1*0.05-0.3*g2+rnorm(N)
b1=lm(y~g1)$coeff[2]
b2=lm(y~g2)$coeff[2]
b1=lm(y~g1)$coeff[2]
b2=lm(y~g2)$coeff[2]
covg=cov(g1,g2)
b1
b2
cov(g1,g2)
S=matrix(0,c(3,3))
S=matrix(0,c(3,3))
colnames(S)=rownames(S)=c("g1","g2","y")
S
S=array(0,c(3,3))
colnames(S)=rownames(S)=c("g1","g2","y")
S
S=array(0,c(3,3))
colnames(S)=rownames(S)=c("g1","g2","y")
S["g1","g1"]=var(g1)
S["g2","g2"]=var(g2)
S["y","y"]=var(y)
S["g1","g2"]=cov(g1,g2)
S["y","g1"]=b1*var(g1)
S["y","g2"]=b2*var(g2)
S[lower.tri(S)]=t(S)[lower.tri(S)]
S
S=array(0,c(3,3))
colnames(S)=rownames(S)=c("g1","g2","y")
S["g1","g1"]=var(g1)
S["g2","g2"]=var(g2)
S["y","y"]=var(y)
S["g1","g2"]=cov(g1,g2)
S["g1","y"]=b1*var(g1)
S["g2","y"]=b2*var(g2)
S[lower.tri(S)]=t(S)[lower.tri(S)]
S
var(cbind(g1,g2,y))
summary(lm(y~g1+g2))
.b(response = 3,pred=1:2,S=S)
.seb(response = 3,pred=1:2,S=S,N=N)
# conditional b1 | b2
res=lm(y~g2)$residuals
summary(lm(res~g1))
b1
.b(response = 3,pred=1:2,S=S)
summary(lm(res~g1))
.cond_b(response=3,pred=1,cond=2,S=S)
summary(lm(res~g1))
.cond_b(response=3,pred=1,cond=2,S=S)
.cond_se(response=3,pred=1,cond=2,S=S,N=N)
.cond_b(response=3,pred=1,cond=2,S=S)
.cond_se(response=3,pred=1,cond=2,S=S,N=N)
setwd("~/Projects/saving_gwas_filtered_to_bucket/")
setwd("~/Projects/Sanger_OT_GoldStandards/01_orig_GS/")
libray(data.table)
library(data.table)
GS=fread("GS_l2G.txt",data.table=F)
si=fread("study_index.csv",data.table=F)
fss=fread("list_of_otg_gwas.txt",data.table=F,header=F)
fss=fss[,1]
fss=fread("list_of_otg_gwas.txt",data.table=F,header=F)
fss=fss[,1]
length(unique(GS$trait_info.ontology))
length(unique(GS$association_info.otg_id))
dim(si)
table(GS$association_info.otg_id%in%si$study_id)
GS[!(GS$association_info.otg_id%in%si$study_id),]
table(GS$association_info.otg_id%in%si$study_id)
GS$association_info.otg_id%in%si$study_id
lll=si[si$study_id%in%GS$association_info.otg_id,]
dim(lll)
table(lll$has_sumstats)
lll2=lll[lll$has_sumstats,]
dim(lll2)
table(GS$association_info.otg_id%in%lll2$study_id)
GS=fread("GS_l2G.txt",data.table=F)
si=fread("study_index.csv",data.table=F)
fss=fread("list_of_otg_gwas.txt",data.table=F,header=F)
fss=fss[,1]
#
efos_ss=si$trait_efos
efos_ss=gsub(efos_ss,pattern="['",replacement = "",fixed = T)
efos_ss=gsub(efos_ss,pattern="']",replacement = "",fixed = T)
si$trait_efos=efos_ss
#
y=GS$trait_info.ontology
y=y[!is.na(y)]
y=unique(y)
efos=y
#
fss=gsub(fss,pattern = 'gs://genetics-portal-dev-sumstats/unfiltered/gwas/',replacement = "")
fss=gsub(fss,pattern='.parquet/',replacement = "")
table(fss%in%si$study_id)
#
si_fss=si[si$study_id%in%fss,]
efos_ss=si_fss$trait_efos
efos_ss=unique(efos_ss)
table(efos%in%efos_ss)
efos_with_ss=efos[efos%in%efos_ss]
dim(GS)
table(GS$trait_info.ontology%in%efos_with_ss)
selection_of_pow_gwas=function(x)
{
y=si_fss[si_fss$trait_efos==x,]
i=1
n=NULL
for (i in 1:nrow(y)){
if (!is.na(y$n_cases[i])){
prev=y$n_cases[i]/y$n_initial[i]
Neff=4*prev*(1-prev)*y$n_initial[i]
} else {
Neff=y$n_initial[i]
}
n=c(n,Neff)
}
y[which.max(n),"study_id"]
}
l=sapply(efos_with_ss,FUN=selection_of_pow_gwas)
l[1]
GS=cbind(GS,the_biggest_GWAS_id=l[GS$trait_info.ontology])
table(is.na(GS$the_biggest_GWAS_id))
length(unique(GS$the_biggest_GWAS_id))
